class Solution {
    class Pair{
        int first;
        int second;
        public Pair(int first,int second){
            this.first=first;
            this.second=second;
        }
    }
    public void dfs(int ro,int co,char[][] grid,boolean[][] vis){
        vis[ro][co]=true;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(ro,co));
        int n=grid.length;
        int m=grid[0].length;
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        while(!q.isEmpty()){
            int row1=q.peek().first;
            int col1=q.peek().second;
            q.poll();
            for(int i=0;i<4;i++){
                    int row2=row1+delrow[i];
                    int col2=col1+delcol[i];
                    if(row2>=0 && row2<n && col2>=0 && col2<m && 
                    !vis[row2][col2] && grid[row2][col2] =='1')
                    {
                    q.add(new Pair(row2,col2));
                    vis[row2][col2]=true;
                    }
            }
        }
    }
    public int numIslands(char[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        boolean[][] vis=new boolean[n][m];
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1' && !vis[i][j]){
                    cnt++;
                    dfs(i,j,grid,vis);
                }
            }
        }
        return cnt;
    }
}
